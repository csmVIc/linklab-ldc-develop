## Default values for emqx.
## This is a YAML-formatted file.
## Declare variables to be passed into your templates.

## It is recommended to have odd number of nodes in a cluster, otherwise the emqx cluster cannot be automatically healed in case of net-split.
replicaCount: 3 
image:
  repository: emqx/emqx
  pullPolicy: IfNotPresent

persistence:
  enabled: false
  size: 20Mi
  ## If defined, volume.beta.kubernetes.io/storage-class: <storageClass>
  ## Default: volume.alpha.kubernetes.io/storage-class: default
  # storageClass: "-"
  accessMode: ReadWriteOnce
  ## Existing PersistentVolumeClaims
  ## The value is evaluated as a template
  ## So, for example, the name can depend on .Release or .Chart
  # existingClaim: ""

resources: {}
  # limits:
  #   cpu: 500m
  #   memory: 512Mi
  # requests:
  #   cpu: 500m
  #   memory: 512Mi

## EMQX configuration item, see the documentation (https://github.com/emqx/emqx-docker#emq-x-configuration)
emqxConfig:
  EMQX_ALLOW_ANONYMOUS: false
  EMQX_ACL_NOMATCH: deny
  EMQX_ACL_DENY_ACTION: ignore
  EMQX_LOG__TO: both
  EMQX_LOG__LEVEL: debug
  EMQX_LOADED_PLUGINS: "emqx_auth_mongo,emqx_recon,emqx_retainer,emqx_management,emqx_dashboard"
  EMQX_LOADED_MODULES: "emqx_mod_presence,emqx_mod_delayed,emqx_mod_acl_internal"
  EMQX_AUTH__MONGO__TYPE: rs
  EMQX_AUTH__MONGO__RS_SET_NAME: rs0
  EMQX_AUTH__MONGO__SERVER: "mongo-server-headless:27017"
  EMQX_AUTH__MONGO__LOGIN: Client
  EMQX_AUTH__MONGO__PASSWORD: 12
  EMQX_AUTH__MONGO__AUTH_SOURCE: linklab
  EMQX_AUTH__MONGO__DATABASE: linklab
  EMQX_AUTH__MONGO__AUTH_QUERY__COLLECTION: clients
  EMQX_AUTH__MONGO__AUTH_QUERY__PASSWORD_HASH: sha256,salt
  EMQX_AUTH__MONGO__AUTH_QUERY__PASSWORD_FIELD: password,salt
  EMQX_AUTH__MONGO__SUPER_QUERY: on
  EMQX_AUTH__MONGO__SUPER_QUERY__COLLECTION: clients
  EMQX_LISTENER__TCP__EXTERNAL__ACTIVE_N: 1000
  EMQX_ZONE__EXTERNAL__MAX_MQUEUE_LEN: 20000
  EMQX_ZONE__INTERNAL__MAX_MQUEUE_LEN: 80000
  EMQX_ZONE__EXTERNAL__RETRY_INTERVAL: 15s
  EMQX_ZONE__EXTERNAL__MQUEUE_STORE_QOS0: false
  EMQX_ZONE__INTERNAL__MQUEUE_STORE_QOS0: false
  # SSL配置参考如下链接 emqx-rel现阶段不支持挂载证书，要等到v4.2.4版本
  # https://github.com/emqx/emqx-rel/issues/617
  # EMQX_LISTENER__SSL__EXTERNAL__KEYFILE: /etc/certs/key.pem
  # EMQX_LISTENER__SSL__EXTERNAL__CERTFILE: /etc/certs/cert.pem

## --------------------------------------------------------------------
##  [ACL](https://docs.emqx.io/broker/latest/en/advanced/acl-file.html)

##  -type(who() :: all | binary() |
##                 {ipaddr, esockd_access:cidr()} |
##                 {client, binary()} |
##                 {user, binary()}).

##  -type(access() :: subscribe | publish | pubsub).

##  -type(topic() :: binary()).

##  -type(rule() :: {allow, all} |
##                  {allow, who(), access(), list(topic())} |
##                  {deny, all} |
##                  {deny, who(), access(), list(topic())}).
## --------------------------------------------------------------------
emqxAclConfig: >
  {allow, {user, "dashboard"}, subscribe, ["$SYS/#"]}.
  {allow, {ipaddr, "127.0.0.1"}, pubsub, ["$SYS/#", "#"]}.
  {deny, all, subscribe, ["$SYS/#", {eq, "#"}]}.
  {allow, all, publish, ["clients/%u/%c/publish/#"]}.
  {allow, all, subscribe, ["clients/%u/%c/subscribe/#"]}.

## EMQX Enterprise Edition requires manual creation of a Secret containing the licensed content. Write the name of Secret to the value of "emqxLicneseSecretName"
## Example:
##   kubectl create secret generic emqx-license-secret-name --from-file=/path/to/emqx.lic
emqxLicneseSecretName:

service:
  ## Service type
  ##
  type: NodePort
  ## Port for MQTT
  ##
  mqtt: 1883
  ## Port for MQTT(SSL) 
  ##
  mqttssl: 8883
  ## Port for mgmt API
  ##
  mgmt: 8081
  ## Port for WebSocket/HTTP
  ##
  ws: 8083
  ## Port for WSS/HTTPS
  ##
  wss: 8084
  ## Port for dashboard
  ##
  dashboard: 18083
  ## Specify the nodePort(s) value for the LoadBalancer and NodePort service types.
  ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
  ##
  nodePorts:
    mqtt: 31077
    mqttssl:
    mgmt:
    ws:
    wss:
    dashboard:
  ## Set the LoadBalancer service type to internal only.
  ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#internal-load-balancer
  ##
  # loadBalancerIP:
  ## Load Balancer sources
  ## ref: https://kubernetes.io/docs/tasks/access-application-cluster/configure-cloud-provider-firewall/#restrict-access-for-loadbalancer-service
  ## Example:
  ## loadBalancerSourceRanges:
  ## - 10.10.10.0/24
  ##
  loadBalancerSourceRanges: []
  ## Provide any additional annotations which may be required. Evaluated as a template
  ##
  annotations: {}

nodeSelector: {}

tolerations: []

affinity: {}
  # podAntiAffinity:
  #   requiredDuringSchedulingIgnoredDuringExecution:
  #   - labelSelector:
  #       matchExpressions:
  #       - key: app
  #         operator: In
  #         values:
  #         - emqx
  #     topologyKey: "kubernetes.io/hostname"

ingress:
  ## ingress for EMQX Dashboard
  dashboard:
    enabled: false
    annotations: {}
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
    path: /
    hosts:
    - dashboard.emqx.local
    tls: []

  ## ingress for EMQX Mgmt API
  mgmt:
    enabled: false
    annotations: {}
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
    path: /
    hosts:
    - api.emqx.local
    tls: []

