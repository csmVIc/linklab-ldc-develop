package edgenode

import (
	"encoding/json"
	"fmt"

	log "github.com/sirupsen/logrus"
	apiv1 "k8s.io/api/core/v1"
	corev1 "k8s.io/api/core/v1"
	"k8s.io/api/extensions/v1beta1"
	"k8s.io/apimachinery/pkg/util/intstr"
	"k8s.io/apimachinery/pkg/util/yaml"
)

// LinkPodIngress 关联PodIngress
func (ed *Driver) LinkPodIngress(podYaml []byte, namespace string) (*map[string]string, error) {

	podJson, err := yaml.ToJSON(podYaml)
	if err != nil {
		err = fmt.Errorf("yaml.ToJSON error {%v}", err)
		log.Error(err)
		return nil, err
	}

	podConfig := &apiv1.Pod{}
	if err := json.Unmarshal(podJson, podConfig); err != nil {
		err = fmt.Errorf("json.Unmarshal error {%v}", err)
		log.Error(err)
		return nil, err
	}

	// Service
	svcConfig := &corev1.Service{}
	svcConfig.Name = podConfig.Name
	svcConfig.Namespace = namespace
	svcConfig.Spec.Type = corev1.ServiceTypeClusterIP
	svcConfig.Spec.Ports = []corev1.ServicePort{}
	svcConfig.Spec.Selector = map[string]string{"name": podConfig.Name}

	// Ingress
	ingressConfig := &v1beta1.Ingress{}
	ingressConfig.Name = podConfig.Name
	ingressConfig.Namespace = namespace
	ingressConfig.Annotations = map[string]string{"nginx.ingress.kubernetes.io/rewrite-target": "/$2"}
	ingressConfig.Spec.Rules = []v1beta1.IngressRule{}
	ingressConfig.Spec.Rules = append(ingressConfig.Spec.Rules, v1beta1.IngressRule{
		Host: ed.info.Ingress.Domain,
		IngressRuleValue: v1beta1.IngressRuleValue{
			HTTP: &v1beta1.HTTPIngressRuleValue{
				Paths: []v1beta1.HTTPIngressPath{},
			},
		},
	})

	// 回复结果
	res := map[string]string{}

	// 端口映射关系
	for _, containerInfo := range podConfig.Spec.Containers {
		for _, portInfo := range containerInfo.Ports {

			svcConfig.Spec.Ports = append(svcConfig.Spec.Ports, corev1.ServicePort{
				Port: portInfo.ContainerPort,
			})

			ingressConfig.Spec.Rules[0].HTTP.Paths = append(ingressConfig.Spec.Rules[0].HTTP.Paths, v1beta1.HTTPIngressPath{
				Path: fmt.Sprintf("/%s/%s/port%v(/|$)(.*)", namespace, svcConfig.Name, portInfo.ContainerPort),
				Backend: v1beta1.IngressBackend{
					ServiceName: svcConfig.Name,
					ServicePort: intstr.IntOrString{
						Type:   intstr.Int,
						IntVal: portInfo.ContainerPort,
					},
				},
			})

			res[fmt.Sprintf("%v", portInfo.ContainerPort)] = fmt.Sprintf("http://%v%v", ed.info.Ingress.Domain, fmt.Sprintf("/%s/%s/port%v", namespace, svcConfig.Name, portInfo.ContainerPort))
		}
	}

	// 服务没有暴露任何端口号
	if len(svcConfig.Spec.Ports) < 1 {
		return nil, nil
	}

	// 创建服务
	if err := ed.ServiceApplyByConfig(svcConfig, namespace); err != nil {
		log.Error(err)
		return nil, err
	}

	// 创建Ingress
	if err := ed.IngressApplyByConfig(ingressConfig, namespace); err != nil {
		log.Error(err)
		return nil, err
	}

	return &res, nil
}
